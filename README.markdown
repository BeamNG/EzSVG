EzSVG
=====

Lua library for easy SVG generation
-----------------------------------

This is a preview release of EzSVG. Interface is not yet finalized and some features are still missing. This document will first inform you about the core mechanics of EzSVG and then give an overview of its functions/methods. It will link to W3Cs SVG specification, as EzSVG just wraps the SVG language in a Lua way.

### What you can do with EzSVG

EzSVG can generate SVG documents generated by Lua code by creating and nesting SVG Elements. The elements are created by constructor functions (all functions attached to EzSVG starting with a capital letter) and represented as Lua tables. All elements directly (or indirectly, via group or by reference) added to a main SVG Document element (created with EzSVG.Document) are rendered when the writeTo method of the Document is called.

### Good stuff in EzSVG

Besides generating the SVG document by the means of nested Lua tables some other features are implemented:

* Style properties can be written with an underscore instead of a dash (e.g. font_size instead of font-size) allowing for Lua literal table syntax when styling elements.
* Table methods return the table itself, allowing for method-call lists.
* Elements referenced by other elements are automagically inserted into the SVG document.
* Pure Lua library, small footprint: Mix it with every other library/framework â€“ no collision of namespaces.

### Bad stuff in EzSVG

The main goal of EzSVG is generative artwork. EzSVG is neither about a complete set of features nor about output code quality. EzSVG can't read or render SVG. The user can create invalid SVG code with EzSVG.

### Lua example showing some features

```lua
 -- include the library
EzSVG = require "EzSVG"

 -- create a document
local doc = EzSVG.Document(1000, 1000)

 -- set styling for all new created elements
EzSVG.setStyle({
    stroke_width= 2,
    stroke= "black"
})

for d=0,1000,100 do
    -- create a circle
    local circle = EzSVG.Circle(d, d, d/10)
    -- add the circle to the doc
    doc:add(circle)
     -- set a fill color
    circle:setStyle("fill", EzSVG.rgb(d/4, 0, 0))
end

-- you can also set a single style
EzSVG.setStyle("stroke", "green")

-- create a group (very handy, also stays a group in Inkscape/Illustrator)
local group = EzSVG.Group()

for r=0,360, 10 do
    -- create a line and add a transform (rotation with r degrees, centered on 500/500)
    local line = EzSVG.Line(100, 500, 900, 500):rotate(r, 500, 500)
    -- add it to the group
    group:add(line)     
end

-- add the group to the document
doc:add(group)

-- clear the style
EzSVG.clearStyle()

-- create a path object and set its styling
local path = EzSVG.Path({
    stroke = "blue",
    stroke_width = 2,
    fill = EzSVG.RadialGradient():addStop(0, "black"):addStop(100, "yellow"),
    fill_opacity = "0.8"
})

-- draw the path
path:moveToA(500, 500)
    :sqCurveTo(300,300)
    :sqCurveTo(-200, 0)
    :sqCurveTo(-200, -400)
    :sqCurveToA(500, 500)
    
-- add path to the doc
doc:add(path)

-- add text to doc, add a path and style it
doc:add(EzSVG.Text(
    "It's so ez to draw some lines, it's so easy to draw some lines ..."
):setPath(path):setStyle({
    font_size= 60,
    font_family= "Arial",
    fill= "#CCCCCC",
    stroke= "black"
}))

 -- generate the svg and write to file
doc:writeTo("doc-example.svg")
```

[Here is the result rendered with Inkscape](http://www.cappel-nord.de/ezsvg-examples/doc-example.png)

Renderings of the other Example Files:
* [example1.lua](http://www.cappel-nord.de/ezsvg-examples/example1.png)
* [example2.lua](http://www.cappel-nord.de/ezsvg-examples/example2.png)
* [example3.lua](http://www.cappel-nord.de/ezsvg-examples/example3.png)
* [example4.lua](http://www.cappel-nord.de/ezsvg-examples/example4.png)
* [example5.lua](http://www.cappel-nord.de/ezsvg-examples/example5.png)

Function/Method Reference
-------------------------

[working on this ... not yet!]